import logging
import os
import sys
import time
from pathlib import Path
import os
import sys
import time
import random
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

fed_path = Path(os.path.join(os.path.dirname(__file__), "..")).resolve()
print(fed_path)

sys.path.append(str(fed_path))  # Parent directory where is the fedml_api module
print(sys.path)

from fedstellar.learning.pytorch.malwares.malwares import MalwaresDataset

from fedstellar.learning.pytorch.malwares.models.mlp import MalwaresModelMLP

from fedstellar.learning.pytorch.statisticslogger import FedstellarLogger
from fedstellar.learning.pytorch.datamodule import DataModule


from fedstellar.learning.pytorch.lightninglearner import LightningLearner

from fedstellar.config.config import Config


from fedstellar.node import Node

os.environ["PYTORCH_ENABLE_MPS_FALLBACK"] = "1"


def create_ligtningTrainer(epochs):
    import lightning
    from lightning.pytorch.callbacks.early_stopping import EarlyStopping
    from lightning.pytorch.callbacks.model_checkpoint import ModelCheckpoint

    # tensorboard = pl_loggers.TensorBoardLogger('./')

    # split into train and val
    # trainer = lightning.Trainer(fast_dev_run=100)
    monitor = "Validation/Accuracy"
    # early_stop_callback = EarlyStopping(
    #     monitor=monitor, patience=5, verbose=True, mode="max"
    # )
    checkpoint_callback = ModelCheckpoint(save_top_k=1, monitor=monitor, mode="max")

    trainer = lightning.Trainer(
        max_epochs=epochs,
        callbacks=[checkpoint_callback],  # early_stop_callback,
        enable_checkpointing=True,
    )  # logger=None,

    return trainer


def main():
    idx = 0
    n_nodes = 8
    num_workers = 8

    config = Config(
    entity="participant",
    participant_config_file="app/config/fedstellar_CFL_15_07_2024_12_54_29/participant_0.json",
    )
    # attacks = config.participant["adversarial_args"]["attacks"]
    poisoned_persent = config.participant["adversarial_args"]["poisoned_sample_percent"]
    poisoned_ratio = config.participant["adversarial_args"]["poisoned_ratio"]
    targeted = str(config.participant["adversarial_args"]["targeted"])
    target_label = config.participant["adversarial_args"]["target_label"]
    target_changed_label = config.participant["adversarial_args"]["target_changed_label"]
    noise_type = config.participant["adversarial_args"]["noise_type"]
    iid = config.participant["data_args"]["iid"]
    # indices_dir = config.participant['tracking_args']["model_dir"]
    indices_dir = "/home/ubuntu/fedstellar-development-main/app/models/test"

    label_flipping = False
    data_poisoning = False
    model_poisoning = False

    print("poisoned_persent, poisoned_ratio", poisoned_persent,poisoned_ratio )
    print("targeted", targeted)
    print("target_label", target_label)
    print("target_changed_label", target_changed_label)
    print("noise_type", noise_type)
    print("iid", iid)
    print("indices_dir", indices_dir)

    iid = False
    malwware_dataset = MalwaresDataset(
        sub_id=idx, number_sub=n_nodes, iid=iid
    )    

    
    import torch
    print("Cuda Available: ", torch.cuda.is_available())
    model = MalwaresModelMLP(
        # get first item from dataset and check input dimensions
        input_size=malwware_dataset.train_set.__getitem__(0)[0].shape[0]
    )
    print(malwware_dataset.train_set.__getitem__(0)[0].shape[0])

    


    dataset = DataModule(train_set=malwware_dataset.train_set, train_set_indices=malwware_dataset.train_indices_map, test_set=malwware_dataset.test_set, test_set_indices=malwware_dataset.test_indices_map, num_workers=num_workers, sub_id=idx, number_sub=n_nodes, indices_dir=indices_dir, label_flipping=label_flipping, data_poisoning=data_poisoning, poisoned_persent=poisoned_persent, poisoned_ratio=poisoned_ratio, targeted=targeted, target_label=target_label,
                        target_changed_label=target_changed_label, noise_type=noise_type)



    # help(dataset.test_loader.dataset.dataset)
    # print("X")
    # malwware_dataset.check_label_distribution(dataset.train_loader.dataset.dataset.dataset)
    # print("Y")
    # malwware_dataset.check_label_distribution(dataset.test_loader.dataset.dataset)

    
    # node = Node(
    #     idx=idx,
    #     experiment_name="experiment_name",
    #     model=model,
    #     data=dataset,
    #     # hostdemo=hostdemo,
    #     # host=host,
    #     # port=port,
    #     config=config,
    #     encrypt=False,
    # )

    # node.start()
    # print("Node started, grace time for network start-up (30s)")
    # time.sleep(30)  # Wait for the participant to start and register in the network

    # Node Connection to the neighbors
    # for i in neighbors:
    #     print(f"Connecting to {i}")
    #     node.connect_to(i.split(":")[0], int(i.split(":")[1]), full=False)
    #     time.sleep(5)

    # logging.info(f"Neighbors: {node.get_neighbors()}")
    # logging.info(f"Network nodes: {node.get_network_nodes()}")

    # start_node = config.participant["device_args"]["start"]

    rounds = 10
    epochs = 3

    # node.set_start_learning(rounds=rounds, epochs=epochs)  # rounds=10, epochs=5

    # csvlogger = CSVLogger(f".", name="metrics", version=f"participant_{idx}")
    # csvlogger.global_step = 0
    # csvlogger.experiment.add_figure = lambda x: print("add_figure: ", x)

    # learner = LightningLearner(
    #     model=model, data=dataset, config=config, logger=FedstellarLogger(save_dir=".")
    # )
    # learner

    # learner.init()
    # learner.create_trainer()

    # print("FIT")
    # for i in range(20):
    #     learner.fit()

    # print("EValuate")
    # learner.evaluate()

    total_epochs = epochs * rounds

    # if merged dataset => dataset 3times bigger
    total_epochs //= 3

    # total_epochs=1
    return

    trainer = create_ligtningTrainer(total_epochs)
    trainer.fit(model=model, datamodule=dataset)
    # trainer.fit(model=model, datamodule=dataset)

    trainer.test(model=model, datamodule=dataset)

if __name__ == "__main__":
    # os.system("clear")
    main()
